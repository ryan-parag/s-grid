/* ============================================
	Dead simple grids. Cross browser. Semantic. Intuitive
	Browsers: ie8, ie10, ie11, FF, Safari, Chrome
	Dependancies :
		Variables below defined in your _base.scss or similar.
			$container-class: 'foo';
			$row-class: 'foo';
			$column-class: 'bar';
			$gutter: 3%; // spacing between columns
			$max-columns: 6; //  @for loop class declarations - used for equal column single digit
			breakpoint mixin function - included in repo.
	Usage :
		.columns-{percentage, double digit} for mixed columns
			.columns-70, .columns-30 = totaling to 100
		.columns-{single digit number} for equal coloumns
			.columns-1
			.columns-2, .columns-2
			.columns-4, .columns-4, .columns-4, .columns-4
	@include breakpoint($small) {
		@include columns(2);
	}
	or for inline block grids - example below
	.ib {
		@include grid(ib);
		li {
			width: 100%;
			font-size: 1rem;
			@include breakpoint($small) {
				@include columns(2, ib, $gutter: 2%);
			}
			@include breakpoint($medium) {
				@include columns(3, ib, $gutter: 2%);
			}
		}
	}
============================================ */

//-------------------------------------------------------
// GRID SETTINGS
//-------------------------------------------------------

// this is the fixed gutter between columns
$gutter: 			3% !default;
$docWidth: 			100% !default;

// this sets your class names
$container-class:	"container" !default; // optional
$row-class:			"row" !default;
$column-class:		"columns" !default;
$max-columns:		12 !default;

// Grid check
$gridDebug:			true !default;


//-------------------------------------------------------
// GRID FUNCTIONS
//-------------------------------------------------------

@function column-width($num, $width) {
	@return ( $width / $num );
}

@function third-width($num, $width) {
	@return $num * ( $width / 3 );
}


//-------------------------------------------------------
// CLEARFIX
//-------------------------------------------------------
@mixin clearfix {
	&::after {
		clear: both;
		content: "";
		display: table;
	}
}


//-------------------------------------------------------
// GRID MIXINS
//-------------------------------------------------------

@mixin set-gutter($gutter) {

	margin-left: -$gutter;
	margin-right: -$gutter;
	padding-left: $gutter;

	@include clearfix();

}

// Centered container element
@mixin container-fixed($gutter: $gutter, $padded: false) {
	position: relative;
	overflow: hidden;
	margin-right: auto;
	margin-left: auto;

	// so edges always have space
	@if ( $padded == true ) {
		padding-left:  ($gutter);
		padding-right: ($gutter);
	}

	@include clearfix();
}

@mixin grid( $display: float, $gutter: $gutter ) {

	box-sizing: border-box;

	@if( $display == 'ib' ) {
		font-size: 0px;
		text-align: justify;
		&:after {
			content: '';
			display: inline-block;
			width: 100%;
		}
	} @else {
		@include set-gutter($gutter);
	}

}

@mixin column() {
	box-sizing: border-box;
	position: relative;
	min-height: 1px;
	width: 100%;
}

@mixin columns($num, $display: float, $gutter: $gutter) {

	@include column();

	// Note: never wrap this with a breakpoint to allow it being wrapped in other styles.
	// e.g. #elem { @include breakpoint($small) { @include columns(2); } }

	@if ( round($num) == $num ) {

		// if whole number for even # cols
		$colWidth: column-width($num, $docWidth);

		@if ( $gutter != 0 ) {
			width: calc( #{$colWidth} - ( #{$gutter} ) );
		} @else {
			width: column-width($num, $docWidth);
		}

		.no-gutter & {
			width: column-width($num, $docWidth);
		}

	} @else {

		@if ( $gutter != 0 ) {
			// for mixed width cols, data-columns=".3", columns(.3)
			width: calc( ( #{$num} * #{$docWidth} ) - ( #{$gutter} ) );
		} @else {
			width: ($num * $docWidth);
		}

		.no-gutter & {
			width: ($num * $docWidth);
		}

	}

	@if( $display == 'ib' ) {

		display: inline-block;
		vertical-align:top;
		position: relative;
		text-align: left; // reset
		font-size: initial;

	} @else {

		float: left;
		margin-right: $gutter;

		.no-gutter & {
			margin-right: 0;
		}

	}

}

@mixin third($num) {
	float: left;
	width: third-width($num, $docWidth);
}

// set the proportions you want to use
@mixin grid-setup() {

	@for $i from 1 through $max-columns {

		[data-columns='#{$i}'],
		.#{$column-class}-#{$i} {
			@include columns($i);
		}

		// offsets
		[data-offset-columns='#{$i}'],
		.offset-#{$column-class}-#{$i} {
			margin-left: column-width($i, $docWidth);
		}

	}

	// Percentages for mixed widths
	@for $i from 1 through 10 {

		[data-columns='.#{$i}'],
		.#{$column-class}-#{$i}0 {
			@include columns($i/10);
		}
		[data-columns='.#{$i}5'],
		.#{$column-class}-#{$i}5 {
			@include columns((($i*10)+5)/100);
		}

		// offsets
		[data-offset-columns='.#{$i}'],
		.offset-#{$column-class}-#{$i} {
			margin-left: column-width($i, $docWidth);
		}
		[data-offset-columns='.#{$i}5'],
		.offset-#{$column-class}-#{$i}5 {
			margin-left: column-width((($i*10)+5)/100, $docWidth);
		}

	}

}


//-------------------------------------------------------
// CLASS AND DATA DELEGATIONS
//-------------------------------------------------------

[class~='#{$container-class}'],
[data-layout='container'] {
	@include container-fixed();
}

[class~='#{$row-class}'],
[data-layout='grid'] {

	@include grid();

	@if( $gridDebug == true ) {
		background: grey(darkest); // testing purposes
	}

}

[class*='#{$column-class}-'],
[data-columns] {
	@if( $gridDebug == true ) {
		background: $yellow; // testing purposes
		padding-top: 1.5rem;
		padding-bottom: 1.5rem;
		margin-top: 0.5rem;
		margin-bottom: 0.5rem;
		font-weight: 600;
	}
}

// find a way to reset the value of gutter to also apply to columns etc..
.no-gutter {
	@include set-gutter(0);
}
.reset-gutter {
	@include set-gutter($gutter);
}

// Run grid
@include grid-setup();